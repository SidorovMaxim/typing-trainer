{"version":3,"sources":["main/Main.jsx","header/Header.jsx","main/Buttons.jsx","main/Text.jsx","main/Params.jsx","main/Containers.jsx","footer/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["counter","Header","className","href","ButtonStart","props","handleStart","onClick","ButtonRestart","Text","state","error","isLoaded","gameOver","chars","previous","charNum","getLoremIpsum","bind","charsToArray","handleInputChange","fetch","then","res","text","result","setState","this","setNumOfChars","start小ounter","replace","split","map","item","j","value","length","fakeInput","document","querySelector","focus","addEventListener","current","mistakes","finalText","setCurrent","setMistakes","setFinalText","handleFinish","changeCharClass","index","status","removeEventListener","blur","checkGameOver","textMapping","message","React","PureComponent","Counter","counterTime","useContext","AppContext","counterTimeSeconds","Math","round","Mistakes","Accuracy","numOfChars","accuracy","color","r","g","b","colorStyle","style","isNaN","Speed","speed","Score","score","NoticeContainer","ParamsContainer","TextContainer","type","defaultValue","ScoreContainer","Main","setCounterTime","useState","appState","setAppState","handleEnter","event","key","useEffect","textContainer","counterStartTime","Date","getTime","setInterval","clearInterval","Footer","createContext","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4f6f0c57.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { AppContext } from '../App.js';\r\nimport { ButtonStart, ButtonRestart } from './Buttons.jsx';\r\nimport { NoticeContainer, ParamsContainer, TextContainer, ScoreContainer } from './Containers.jsx';\r\n\r\n\r\nlet counter;\r\n\r\n\r\nconst Main = () => {\r\n\r\n  // Init context\r\n  const { setCounterTime } = useContext(AppContext);\r\n\r\n\r\n  // Init state\r\n  const [appState, setAppState] = useState('preparation');\r\n\r\n\r\n  // Custom methods\r\n  const start小ounter = () => {\r\n    const counterStartTime = new Date().getTime();\r\n\r\n    counter = setInterval(() => {\r\n      setCounterTime(new Date().getTime() - counterStartTime);\r\n    }, 1000);\r\n  };\r\n\r\n  // Event handlers\r\n  const handleEnter = (event) => {\r\n    if (event.key === 'Enter') handleStart();\r\n  }\r\n\r\n  const handleStart = () => {\r\n    document.removeEventListener('keydown', handleEnter);\r\n    setAppState('start');\r\n  };\r\n\r\n  const handleFinish = () => {\r\n    clearInterval(counter);\r\n    setAppState('finish');\r\n  };\r\n\r\n  // Default methods\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleEnter);\r\n  }, []); // eslint-disable-line\r\n\r\n\r\n  // Render\r\n  const textContainer = (\r\n    <TextContainer\r\n      start小ounter={start小ounter}\r\n      handleFinish={handleFinish}\r\n    />\r\n  );\r\n\r\n  if (appState === 'start') {\r\n    return (\r\n      <section>\r\n        <ParamsContainer />\r\n        {textContainer}\r\n        <ButtonRestart />\r\n      </section>\r\n    );\r\n\r\n  } else if (appState === 'finish') {\r\n    return (\r\n      <section>\r\n        <ParamsContainer />\r\n        {textContainer}\r\n        <ScoreContainer />\r\n        <ButtonRestart />\r\n      </section>\r\n    );\r\n\r\n  } else if (appState === 'preparation') {\r\n    return (\r\n      <section>\r\n        <NoticeContainer />\r\n        <ButtonStart handleStart={handleStart} />\r\n      </section>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <a className='logo' href='./'>\r\n        Typing Trainer\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nexport const ButtonStart = (props) => {\r\n  const { handleStart } = props;\r\n\r\n  return (\r\n    <button\r\n      className=\"button-start\"\r\n      onClick={handleStart}\r\n    >\r\n      I'm ready!\r\n    </button>\r\n  );\r\n};\r\n\r\n\r\nexport const ButtonRestart = () => {\r\n  return (\r\n    <a className=\"button-restart\" href=\"./\">\r\n      Restart\r\n    </a>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\n\r\nclass Text extends React.PureComponent {\r\n\r\n  // Static methods\r\n  getLoremIpsum() {\r\n    fetch('https://baconipsum.com/api/?type=meat-and-filler&sentences=3&format=text')\r\n      .then(res => res.text())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            chars: result\r\n          });\r\n\r\n          this.charsToArray();\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  charsToArray() {\r\n    const { setNumOfChars, start小ounter } = this.props;\r\n\r\n    const chars = this.state.chars\r\n      .replace(/\\s\\s/g, ' ')\r\n      .split('')\r\n      .map((item, j) => ({\r\n        value: item,\r\n        className: 'char'\r\n      }));\r\n\r\n    chars[0].className = 'char_current';\r\n\r\n    setNumOfChars(chars.length);\r\n    this.setState({ chars: chars });\r\n\r\n    start小ounter();\r\n  }\r\n\r\n\r\n  // Constructor\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      gameOver: false,\r\n      chars: []\r\n    };\r\n\r\n    this.previous = {\r\n      charNum: -1\r\n    }\r\n\r\n    this.getLoremIpsum = this.getLoremIpsum.bind(this);\r\n    this.charsToArray = this.charsToArray.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n\r\n  // Default methods\r\n  componentDidMount() {\r\n    const fakeInput = document.querySelector('.fake-input');\r\n\r\n    this.getLoremIpsum();\r\n\r\n    fakeInput.focus();\r\n    fakeInput.addEventListener('input', this.handleInputChange);\r\n  }\r\n\r\n\r\n  // Event handlers\r\n  handleInputChange() {\r\n    const { previous } = this;\r\n\r\n    const { chars } = this.state;\r\n\r\n    const {\r\n      current,\r\n      mistakes,\r\n      finalText,\r\n      setCurrent,\r\n      setMistakes,\r\n      setFinalText,\r\n      handleFinish\r\n    } = this.props;\r\n\r\n    const fakeInput = document.querySelector('.fake-input');\r\n    \r\n    if (\r\n      chars.length !== 0 &&\r\n      fakeInput.value.length === 2\r\n    ) {\r\n\r\n      const changeCharClass = (index, status) => {\r\n        chars[index] = {\r\n          ...chars[index],\r\n          className: `char_${status}`\r\n        };\r\n      };\r\n\r\n      const checkGameOver = () => {\r\n        if (current === chars.length - 1) {\r\n          this.setState({ gameOver: true });\r\n\r\n          fakeInput.removeEventListener('input', this.handleInputChange);\r\n          fakeInput.blur();\r\n\r\n          return handleFinish();\r\n        }\r\n      };\r\n\r\n      const changeFinalText = () => {\r\n        if (previous.charNum !== current) {\r\n          setFinalText([\r\n            ...finalText,\r\n            chars[current]\r\n          ]);\r\n\r\n          previous.charNum++;\r\n        }\r\n      };\r\n\r\n      if (chars[current].value === fakeInput.value[1]) {\r\n        changeCharClass(current, 'correct');\r\n        checkGameOver();\r\n        changeCharClass(current + 1, 'current');\r\n        setCurrent(current + 1);\r\n\r\n      } else {\r\n        changeCharClass(current, 'incorrect');\r\n        setMistakes(mistakes + 1);\r\n      }\r\n\r\n      changeFinalText();\r\n      this.setState({ chars: chars });\r\n    }\r\n\r\n    // Reset entered char\r\n    fakeInput.value = '_'; // Trick to disable first capital letter when using virtual keyboard\r\n  }\r\n\r\n\r\n  // Render\r\n  render() {\r\n    const { finalText } = this.props;\r\n\r\n    const {\r\n      error,\r\n      isLoaded,\r\n      gameOver,\r\n      chars\r\n    } = this.state;\r\n\r\n    const textMapping = (text) => {\r\n      return (\r\n        text.map((item, j) => (\r\n          <span className={item.className} key={\"char_\" + j}>\r\n            {item.value}\r\n          </span>\r\n        ))        \r\n      );\r\n    }\r\n\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n\r\n    } else if (gameOver) {\r\n      return textMapping(finalText);\r\n\r\n    } else if (isLoaded && (typeof chars === 'object')) {\r\n      return textMapping(chars);\r\n\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport default Text;\r\n","import React, { useContext } from 'react';\r\nimport { AppContext } from '../App.js';\r\n\r\n\r\nexport const Counter = () => {\r\n  const { counterTime } = useContext(AppContext);\r\n\r\n  const counterTimeSeconds = Math.round(counterTime / 10e2);\r\n\r\n  return (\r\n    <span className=\"params\">\r\n      <div className=\"params-name\">\r\n        Time:\r\n      </div>\r\n\r\n      <div className=\"params-value\">\r\n        {counterTimeSeconds}\r\n      </div>\r\n\r\n      <div className=\"params-units\">\r\n        sec\r\n      </div>\r\n    </span>\r\n  );\r\n};\r\n\r\n\r\nexport const Mistakes = () => {\r\n  const { mistakes } = useContext(AppContext);\r\n\r\n  return (\r\n    <span className=\"params\">\r\n      <div className=\"params-name\">\r\n        Mistakes:\r\n      </div>\r\n\r\n      <div className=\"params-value\">\r\n        {mistakes}\r\n      </div>\r\n    </span>\r\n  );\r\n};\r\n\r\n\r\nexport const Accuracy = () => {\r\n  const {\r\n    mistakes,\r\n    numOfChars\r\n  } = useContext(AppContext);\r\n\r\n  const accuracy = Math.round(10 * (numOfChars - mistakes) * 100 / numOfChars) / 10;\r\n\r\n  const color = {\r\n    r: (accuracy > 75) ? (1020 - 10.2 * accuracy) : 255,\r\n    g: (accuracy > 75) ? (4.08 * accuracy - 204) : 102,\r\n    b: 102\r\n  }\r\n  const colorStyle = `rgb(${color.r}, ${color.g}, ${color.b})`\r\n\r\n  return (\r\n    <span className=\"params\">\r\n      <div className=\"params-name\">\r\n        Accuracy:\r\n      </div>\r\n\r\n      <div className=\"params-value\" style={{color: colorStyle}}>\r\n        {isNaN(accuracy) ? 100 : accuracy}\r\n      </div>\r\n\r\n      <div className=\"params-units\">\r\n        %\r\n      </div>\r\n    </span>\r\n  );\r\n};\r\n\r\n\r\nexport const Speed = () => {\r\n  const {\r\n    current,\r\n    counterTime\r\n  } = useContext(AppContext);\r\n\r\n  const speed = Math.round(current / (counterTime / 10e2 / 60));\r\n\r\n  const color = {\r\n    r: (speed < 150) ? (255 - 1.7 * speed) : 0,\r\n    g: (speed < 150) ? (102 + 0.68 * speed) : 204,\r\n    b: 102\r\n  }\r\n  const colorStyle = `rgb(${color.r}, ${color.g}, ${color.b})`\r\n\r\n  return (\r\n    <span className=\"params\">\r\n      <div className=\"params-name\">\r\n        Speed:\r\n      </div>\r\n\r\n      <div className=\"params-value\" style={{color: colorStyle}}>\r\n        {isNaN(speed) ? 0 : speed}\r\n      </div>\r\n\r\n      <div className=\"params-units\">\r\n        chars/min\r\n      </div>\r\n    </span>\r\n  );\r\n};\r\n\r\n\r\nexport const Score = () => {\r\n  const {\r\n    current,\r\n    mistakes,\r\n    numOfChars,\r\n    counterTime\r\n  } = useContext(AppContext);\r\n\r\n  const score = Math.round(\r\n    current /\r\n    (counterTime / 10e2 / 60) *\r\n    (numOfChars - mistakes) /\r\n    numOfChars\r\n  );\r\n\r\n  return (\r\n    <div className=\"score\">\r\n      Your score: {score}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { AppContext } from '../App.js';\r\nimport Text from './Text.jsx';\r\nimport { Counter, Mistakes, Accuracy, Speed, Score } from './Params.jsx';\r\n\r\n\r\nexport const NoticeContainer = () => {\r\n  return (\r\n    <div className=\"notice-container\">\r\n      Type as quickly as possible,<br />\r\n      making fewer mistakes,<br />\r\n      to get a better score.\r\n\r\n      <div className=\"prompt\">\r\n        Press \"Enter\" to start\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const ParamsContainer = () => {\r\n  return (\r\n    <div className=\"params-container\">\r\n      <Counter />\r\n      <Mistakes />\r\n      <Accuracy />\r\n      <Speed />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const TextContainer = (props) => {\r\n  const {\r\n    start小ounter,\r\n    handleFinish\r\n  } = props;\r\n\r\n  const {\r\n    current,\r\n    mistakes,\r\n    finalText,\r\n    setCurrent,\r\n    setMistakes,\r\n    setFinalText,\r\n    setNumOfChars\r\n  } = useContext(AppContext);\r\n\r\n  return (\r\n    <div className=\"text-container\">\r\n      <input\r\n        className=\"fake-input\"\r\n        type=\"text\"\r\n        defaultValue='_' // Trick to disable first capital letter when using virtual keyboard\r\n      />\r\n      <Text\r\n        current={current}\r\n        mistakes={mistakes}\r\n        finalText={finalText}\r\n        setCurrent={setCurrent}\r\n        setMistakes={setMistakes}\r\n        start小ounter={start小ounter}\r\n        setFinalText={setFinalText}\r\n        handleFinish={handleFinish}\r\n        setNumOfChars={setNumOfChars}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const ScoreContainer = () => {\r\n  return (\r\n    <div className=\"score-container\">\r\n      <div className=\"result\">\r\n        Good job!\r\n      </div>\r\n\r\n      <Score />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      \r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import './App.css';\nimport React, { createContext, useState } from 'react';\nimport Header from './header/Header.jsx';\nimport Main from './main/Main.jsx';\nimport Footer from './footer/Footer.jsx';\n\n\nexport const AppContext = createContext();\n\n\nfunction App() {\n\n  // Init state\n  const [current, setCurrent] = useState(0);\n  const [mistakes, setMistakes] = useState(0);\n  const [finalText, setFinalText] = useState([]);\n  const [numOfChars, setNumOfChars] = useState(0);\n  const [counterTime, setCounterTime] = useState(0);\n\n  // Render\n  return (\n    <AppContext.Provider \n      value={{\n        current,\n        setCurrent,\n        mistakes,\n        setMistakes,\n        finalText,\n        setFinalText,\n        numOfChars,\n        setNumOfChars,\n        counterTime,\n        setCounterTime\n      }}\n    >\n      <Header />\n      <Main />\n      <Footer />\n    </AppContext.Provider>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}